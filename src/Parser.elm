module Parser exposing (TranscriptLine, parseTranscriptionXML)

import Combine
    exposing
        ( (*>)
        , (<*)
        , ParseErr
        , ParseOk
        , Parser
        , andThen
        , between
        , many
        , manyTill
        , map
        , optional
        , or
        , parse
        , regex
        , skip
        , string
        , whitespace
        )
import Regex


type alias TranscriptLine =
    { time : Int
    , content : String
    }


parseTranscriptionXML : String -> Result (ParseErr ()) (ParseOk () (List TranscriptLine))
parseTranscriptionXML transcription =
    parse transcriptionXML (noWhitespace transcription)


noWhitespace : String -> String
noWhitespace string =
    Regex.replace Regex.All (Regex.regex "\n") (\_ -> " ") string


transcriptionXML : Parser state (List TranscriptLine)
transcriptionXML =
    or userGeneratedClosedCaptions autoGeneratedClosedCaptions


userGeneratedClosedCaptions : Parser state (List TranscriptLine)
userGeneratedClosedCaptions =
    openingTag "?xml"
        *> openingTag "timedtext"
        *> openingTag "body"
        *> many (line userGeneratedLine)
        <* closingTag "body"
        <* closingTag "timedtext"


autoGeneratedClosedCaptions : Parser state (List TranscriptLine)
autoGeneratedClosedCaptions =
    openingTag "?xml"
        *> openingTag "timedtext"
        *> head
        *> openingTag "body"
        *> selfClosingTag "w"
        *> many (line autoGeneratedLine)
        <* closingTag "body"
        <* closingTag "timedtext"


head : Parser state (List String)
head =
    openingTag "head" *> manyTill anyCharacter (closingTag "head")


line : Parser state (List String) -> Parser state TranscriptLine
line lineParser =
    openingTag "p"
        *> lineParser
        |> map (String.join "")
        |> map (Regex.replace Regex.All (Regex.regex "&#39;") (\_ -> "'"))
        |> map (Regex.replace Regex.All (Regex.regex "&quot;") (\_ -> "\""))
        |> map (\line -> { time = 1, content = line })


userGeneratedLine : Parser state (List String)
userGeneratedLine =
    manyTill anyCharacter (closingTag "p")


autoGeneratedLine : Parser state (List String)
autoGeneratedLine =
    manyTill word (or emptyLine (closingTag "p"))


anyCharacter : Parser state String
anyCharacter =
    regex "."


word : Parser state String
word =
    openingTag "s"
        *> manyTill anyCharacter (closingTag "s")
        |> map (String.join "")


emptyLine : Parser state String
emptyLine =
    whitespace *> string "</p>" <* whitespace


openingTag : String -> Parser state (List String)
openingTag name =
    whitespace *> string ("<" ++ name) *> manyTill anyCharacter (string ">")


closingTag : String -> Parser state String
closingTag name =
    string ("</" ++ name ++ ">") <* whitespace


selfClosingTag : String -> Parser state (List String)
selfClosingTag name =
    whitespace *> string ("<" ++ name) *> manyTill anyCharacter (string "/>") <* whitespace
