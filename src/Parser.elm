module Parser exposing (parseTranscriptionXML)

import Combine
    exposing
        ( (*>)
        , (<*)
        , Parser
        , andThen
        , between
        , many
        , manyTill
        , map
        , optional
        , or
        , parse
        , regex
        , skip
        , string
        , whitespace
        )
import Regex


parseTranscriptionXML : String -> Result String String
parseTranscriptionXML transcription =
    case parse transcriptionXML (noWhitespace transcription) of
        Ok ( _, stream, result ) ->
            Ok (joinResult result)

        Err ( _, stream, errors ) ->
            Err (String.join " or " errors)


noWhitespace : String -> String
noWhitespace string =
    Regex.replace Regex.All (Regex.regex "\n") (\_ -> " ") string


joinResult : List String -> String
joinResult result =
    case result of
        x :: xs ->
            case x of
                "" ->
                    joinResult xs

                _ ->
                    x ++ " " ++ joinResult xs

        [] ->
            ""


transcriptionXML : Parser state (List String)
transcriptionXML =
    or userGeneratedClosedCaptions autoGeneratedClosedCaptions


userGeneratedClosedCaptions : Parser state (List String)
userGeneratedClosedCaptions =
    openingTag "?xml"
        *> openingTag "timedtext"
        *> openingTag "body"
        *> many userGeneratedParagraph
        <* closingTag "body"
        <* closingTag "timedtext"


autoGeneratedClosedCaptions : Parser state (List String)
autoGeneratedClosedCaptions =
    openingTag "?xml"
        *> openingTag "timedtext"
        *> head
        *> openingTag "body"
        *> selfClosingTag "w"
        *> many autoGeneratedParagraph
        <* closingTag "body"
        <* closingTag "timedtext"


head : Parser state (List String)
head =
    openingTag "head" *> manyTill anyCharacter (closingTag "head")


userGeneratedParagraph : Parser state String
userGeneratedParagraph =
    openingTag "p"
        *> manyTill anyCharacter (closingTag "p")
        |> map (String.join "")
        |> map (Regex.replace Regex.All (Regex.regex "&#39;") (\_ -> "'"))
        |> map (Regex.replace Regex.All (Regex.regex "&quot;") (\_ -> "\""))


autoGeneratedParagraph : Parser state String
autoGeneratedParagraph =
    openingTag "p"
        *> manyTill word (or emptyParagraph (closingTag "p"))
        |> map (String.join "")
        |> map (Regex.replace Regex.All (Regex.regex "&#39;") (\_ -> "'"))
        |> map (Regex.replace Regex.All (Regex.regex "&quot;") (\_ -> "\""))


emptyParagraph : Parser state String
emptyParagraph =
    whitespace *> string "</p>" <* whitespace


word : Parser state String
word =
    openingTag "s"
        *> manyTill anyCharacter (closingTag "s")
        |> map (String.join "")


anyCharacter : Parser state String
anyCharacter =
    regex "."


openingTag : String -> Parser state (List String)
openingTag name =
    whitespace *> string ("<" ++ name) *> manyTill anyCharacter (string ">")


closingTag : String -> Parser state String
closingTag name =
    string ("</" ++ name ++ ">") <* whitespace


selfClosingTag : String -> Parser state (List String)
selfClosingTag name =
    whitespace *> string ("<" ++ name) *> manyTill anyCharacter (string "/>") <* whitespace
